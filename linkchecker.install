<?php

/**
 * @file
 * Installation file for Link Checker module.
 */

/**
 * Implements hook_install().
 */
function linkchecker_install() {
  $linkchecker_default_impersonate_user = user_load(1);
  config_set('linkchecker.settings', 'impersonate_user', $linkchecker_default_impersonate_user->name);

  // @todo add message for configuration page
  // admin/config/content/linkchecker
}

/**
 * Implements hook_schema().
 */
function linkchecker_schema() {

  $schema['linkchecker_block_custom'] = array(
    'description' => 'Stores all link references for custom blocks.',
    'fields' => array(
      'block_delta'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The machine_name of the custom block.',
      ),
      'lid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {linkchecker_link}.lid.',
      ),
    ),
    'primary key' => array('block_delta', 'lid'),
    'foreign keys' => array(
      'lid' => array(
        'table' => 'linkchecker_link',
        'columns' => array('lid' => 'lid'),
      ),
    ),
    'indexes' => array('lid' => array('lid')),
  );

  $schema['linkchecker_comment'] = array(
    'description' => 'Stores all link references for comments.',
    'fields' => array(
      'cid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {comment}.cid.',
      ),
      'lid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {linkchecker_link}.lid.',
      ),
    ),
    'primary key' => array('cid', 'lid'),
    'foreign keys' => array(
      'cid' => array(
        'table' => 'comment',
        'columns' => array('cid' => 'cid'),
      ),
      'lid' => array(
        'table' => 'linkchecker_link',
        'columns' => array('lid' => 'lid'),
      ),
    ),
    'indexes' => array('lid' => array('lid')),
  );

  $schema['linkchecker_node'] = array(
    'description' => 'Stores all link references for nodes.',
    'fields' => array(
      'nid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {node}.nid.',
      ),
      'lid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {linkchecker_link}.lid.',
      ),
    ),
    'primary key' => array('nid', 'lid'),
    'foreign keys' => array(
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'lid' => array(
        'table' => 'linkchecker_link',
        'columns' => array('lid' => 'lid'),
      ),
    ),
    'indexes' => array('lid' => array('lid')),
  );

  $schema['linkchecker_link'] = array(
    'description' => 'Stores all links.',
    'fields' => array(
      'lid'  => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique link ID.',
      ),
      'urlhash' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The indexable hash of the {linkchecker_link}.url.',
      ),
      'url' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The full qualified link.',
      ),
      'method' => array(
        'type' => 'varchar',
        'length' => 4,
        'default' => 'HEAD',
        'not null' => TRUE,
        'description' => 'The method for checking links (HEAD, GET, POST).',
      ),
      'code' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => -1,
        'description' => 'HTTP status code from link checking.',
      ),
      'error' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'The error message received from the remote server while doing link checking.',
      ),
      'fail_count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Fail count of unsuccessful link checks. No flapping detection. (Successful = 0, Unsuccessful = fail_count+1).',
      ),
      'last_checked' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp of the last link check.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Boolean indicating if a link should be checked or not.',
      ),
    ),
    'primary key' => array('lid'),
    'unique keys' => array('urlhash' => array('urlhash')),
    'indexes' => array(
      'method' => array('method'),
      'code' => array('code'),
      'fail_count' => array('fail_count'),
      'last_checked' => array('last_checked'),
      'status' => array('status'),
    ),
  );

  return $schema;
}

/**
 * If the core modules are disabled the integration need to be disabled.
 */
function linkchecker_modules_disabled($modules) {
  $config = config('linkchecker.settings');
  // Disable link checks for custom blocks.
  if (in_array('block', $modules)) {
    $config->set('linkchecker_scan_blocks', 0);
    $config->save();
    backdrop_set_message(t('Link checks for blocks have been disabled.'));
  }

  // Disable link checks for comments.
  if (in_array('comment', $modules)) {
    foreach (node_type_get_names() as $type => $name) {
      $config->clear('linkchecker_scan_comment_' . $type);
      $config->save();
    }
    backdrop_set_message(t('Link checks for comments have been disabled.'));
  }
}

/**
 * Implements hook_update_last_removed().
 */
function linkchecker_update_last_removed() {
  return 7013;
}

/**
 * Move Link Checker settings from variables to config.
 */
function linkchecker_update_1000() {
  // Migrate variables to config.
  $config = config('linkchecker.settings');
  $config->set('action_status_code_301', update_variable_get('linkchecker_action_status_code_301', 0));
  $config->set('action_status_code_404', update_variable_get('linkchecker_action_status_code_404', 0));
  $config->set('check_connections_max', update_variable_get('linkchecker_check_connections_max', 8));
  $config->set('check_library', update_variable_get('linkchecker_check_library', 'core'));
  $config->set('check_links_interval', update_variable_get('linkchecker_check_links_interval', 2419200));
  $config->set('check_links_types', update_variable_get('linkchecker_check_links_types', 1));
  $config->set('check_useragent', update_variable_get('linkchecker_check_useragent', 'Backdrop CMS (+https://backdropcms.org/)'));
  $config->set('disable_link_check_for_urls', update_variable_get('linkchecker_disable_link_check_for_urls', "example.com\nexample.net\nexample.org"));
  $config->set('extract_from_a', update_variable_get('linkchecker_extract_from_a', 1));
  $config->set('extract_from_audio', update_variable_get('linkchecker_extract_from_audio', 0));
  $config->set('extract_from_embed', update_variable_get('linkchecker_extract_from_embed', 0));
  $config->set('extract_from_iframe', update_variable_get('linkchecker_extract_from_iframe', 0));
  $config->set('extract_from_img', update_variable_get('linkchecker_extract_from_img', 0));
  $config->set('extract_from_object', update_variable_get('linkchecker_extract_from_object', 0));
  $config->set('extract_from_video', update_variable_get('linkchecker_extract_from_video', 0));
  $config->set('filter_blacklist', update_variable_get('linkchecker_filter_blacklist', explode('|', 'filter_autop|insert_block|insert_view|smiley|smileys|weblinks_embed|weblinks_filter')));
  $config->set('ignore_response_codes', update_variable_get('linkchecker_ignore_response_codes', "200\n206\n302\n304\n401\n403"));
  $linkchecker_default_impersonate_user = user_load(1);
  $config->set('impersonate_user', update_variable_get('linkchecker_impersonate_user', $linkchecker_default_impersonate_user->name));
  $config->set('scan_blocks', update_variable_get('linkchecker_scan_blocks', 0));
  $config->set('log_level', update_variable_get('linkchecker_log_level', 6));

  foreach (node_type_get_names() as $type => $name) {
    $config->set('scan_node_' . $type, update_variable_get('linkchecker_scan_node_' . $type, FALSE));
    $config->set('scan_comment_' . $type, update_variable_get('linkchecker_scan_comment_' . $type, FALSE));
  }
  $config->save();

  // Since this is now Backdrop let's update the useragent.
  $user_agent = $config->get('linkchecker_check_useragent');
  if ($user_agent == 'Backdrop (+http://drupal.org/)') {
    $config->set('check_useragent', 'Backdrop CMS (+https://backdropcms.org/)');
    $config->save();
  }

  state_set('linkchecker_cleanup_links_last', update_variable_get('linkchecker_cleanup_links_last', REQUEST_TIME));

  // Delete variables.
  update_variable_del('linkchecker_action_status_code_301');
  update_variable_del('linkchecker_action_status_code_404');
  update_variable_del('linkchecker_check_connections_max');
  update_variable_del('linkchecker_check_library');
  update_variable_del('linkchecker_check_links_interval');
  update_variable_del('linkchecker_check_links_types');
  update_variable_del('linkchecker_check_useragent');
  update_variable_del('linkchecker_cleanup_links_last');
  update_variable_del('linkchecker_disable_link_check_for_urls');
  update_variable_del('linkchecker_extract_from_a');
  update_variable_del('linkchecker_extract_from_audio');
  update_variable_del('linkchecker_extract_from_embed');
  update_variable_del('linkchecker_extract_from_iframe');
  update_variable_del('linkchecker_extract_from_img');
  update_variable_del('linkchecker_extract_from_object');
  update_variable_del('linkchecker_extract_from_video');
  update_variable_del('linkchecker_filter_blacklist');
  update_variable_del('linkchecker_ignore_response_codes');
  update_variable_del('linkchecker_impersonate_user');
  update_variable_del('linkchecker_scan_blocks');
  update_variable_del('linkchecker_log_level');

  foreach (node_type_get_names() as $type => $name) {
    update_variable_del('linkchecker_scan_node_' . $type);
    update_variable_del('linkchecker_scan_comment_' . $type);
  }
}

/**
 * Update linkchecker_block_custom table to work with custom blocks in Backdrop.
 */
function linkchecker_update_1001() {
  if (!db_field_exists('linkchecker_block_custom', 'bid')) {
    return;
  }

  $spec = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'description' => 'The machine_name of the custom block.'
  );
  db_drop_primary_key('linkchecker_block_custom');
  db_change_field('linkchecker_block_custom', 'bid', 'block_delta',
    $spec
  );
  db_add_primary_key('linkchecker_block_custom', array('block_delta', 'lid'));
}
